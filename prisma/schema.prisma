generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  email             String             @unique
  password          String
  fullName          String?            @default("") @map("full_name")
  profilePictureUrl String?            @map("profile_picture_url")
  themes            Theme[]
  learningProgress  LearningProgress[]

  @@map("user")
}

model Theme {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId           String            @map("user_id")
  title            String
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  content          Content[]
  learningProgress LearningProgress?
  quiz             Quiz?

  @@map("theme")
}

model Content {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  themeId          String   @map("theme_id")
  sentence         String
  translation      String
  transcription    String?
  lernedCounts     Int      @default(0) @map("learned_counts")
  hasLearned       Boolean  @default(false) @map("has_learned")
  exampleSentences String[] @map("example_sentences")
  imageUrl         String?  @map("image_url")
  theme            Theme    @relation(fields: [themeId], references: [id], onDelete: Cascade)

  @@map("content")
}

model LearningProgress {
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId        String    @map("user_id")
  themeId       String    @id @unique @map("theme_id")
  wordsLearned  Int       @default(0) @map("words_learned")
  accuracyRate  Int?      @default(0) @map("accuracy_rate")
  lastStudiedAt DateTime? @map("last_studied_at")
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  theme         Theme     @relation(fields: [themeId], references: [id], onDelete: Cascade)

  @@map("learning_progres")
}

model Quiz {
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")
  themeId           String        @unique @map("theme_id")
  correctCount      Int           @default(0) @map("correct_count")
  wrongCount        Int           @default(0) @map("wrong_count")
  correctAnswers    Int           @default(0) @map("correct_answers")
  type              EnumStudyType @default(Quiz)
  repeatedSentences String[]      @map("repeated_sentences")

  theme Theme? @relation(fields: [themeId], references: [id])

  @@map("quiz")
}

enum EnumStudyType {
  Quiz
  RearrangeSentence
}
